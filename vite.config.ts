import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

// Define your canister names here, as they appear in dfx.json
// (and consequently in the .env file generated by dfx, e.g., CANISTER_ID_BACKEND)
const DFX_CANISTERS = ["backend"]; // Add other canister names if needed, e.g., ["backend", "other_canister"]

const viteEnvDefinitions: Record<string, string> = DFX_CANISTERS.reduce(
  (acc: Record<string, string>, canisterName) => {
    const upperCaseCanisterName = canisterName.toUpperCase();
    const canisterIdEnvVar = `CANISTER_ID_${upperCaseCanisterName}`; // e.g., CANISTER_ID_BACKEND
    const viteCanisterIdEnvVar = `VITE_${canisterIdEnvVar}`; // e.g., VITE_CANISTER_ID_BACKEND

    if (process.env[canisterIdEnvVar]) {
      acc[`import.meta.env.${viteCanisterIdEnvVar}`] = JSON.stringify(
        process.env[canisterIdEnvVar]
      );
    }
    return acc;
  },
  {} // Initial value for reduce
);

// Explicitly define VITE_DFX_NETWORK if DFX_NETWORK is available
if (process.env.DFX_NETWORK) {
  viteEnvDefinitions["import.meta.env.VITE_DFX_NETWORK"] = JSON.stringify(
    process.env.DFX_NETWORK
  );
}

// Add any other specific dfx generated .env variables you want to expose to client with VITE_ prefix
// For example, if dfx generates CANISTER_ID_DOXA_LANDING_FRONTEND
if (process.env.CANISTER_ID_DOXA_LANDING_FRONTEND) {
  viteEnvDefinitions[
    "import.meta.env.VITE_CANISTER_ID_DOXA_LANDING_FRONTEND"
  ] = JSON.stringify(process.env.CANISTER_ID_DOXA_LANDING_FRONTEND);
}

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...(process.env.NODE_ENV !== "production" &&
      process.env.REPL_ID !== undefined
      ? [
        await import("@replit/vite-plugin-cartographer").then((m) =>
          m.cartographer()
        ),
      ]
      : []),
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
  },
  define: {
    global: "globalThis",
    ...viteEnvDefinitions, // Added the dynamically generated env variables
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
});
